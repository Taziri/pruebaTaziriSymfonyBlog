<?php

namespace App\Tests\Unit\Service;

use App\Interface\SerializerServiceInterface;
use Symfony\Bundle\FrameworkBundle\Test\KernelTestCase;

class SerializerServiceTest extends KernelTestCase
{
    private ?Object $serializerService;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        self::bootKernel();
        $container = static::getContainer();
        $this->serializerService = $container->get(SerializerServiceInterface::class);
    }

    public function testSerializerServiceDeserializePost(): void
    {
        $serializerService = $this->serializerService;
        /** @var SerializerServiceInterface $serializerService  */
        $response = $serializerService->deserializePost($this->getMockStringPost());

        self::assertIsObject($response);
        self::assertIsString($response->getBody());
        self::assertGreaterThan(2, strlen($response->getBody()));
    }

    public function testSerializerServiceUnSerializePostList(): void
    {
        $serializerService = $this->serializerService;
        /** @var SerializerServiceInterface $serializerService  */
        $response = $serializerService->unSerializePostList($this->getMockStringPostList());

        self::assertIsIterable($response);
    }

    public function testDeserializeAuthor(): void
    {
        $serializerService = $this->serializerService;
        /** @var SerializerServiceInterface $serializerService  */
        $response = $serializerService->deserializeAuthor($this->authorJson());

        self::assertIsObject($response);
        self::assertGreaterThan(2, strlen($response->getName()));
        self::assertGreaterThan(2, strlen($response->getEmail()));
        self::assertIsObject($response->getCompany());
        self::assertGreaterThan(2, strlen($response->getCompany()->getName()));
    }

    private function getMockStringPostList():string
    {
        return "[{\"id\":1,\"name\":\"LeanneGraham\",\"username\":\"Bret\",\"email\":\"Sincere@april.biz\",\"address\":{\"street\":\"KulasLight\",\"suite\":\"Apt.556\",\"city\":\"Gwenborough\",\"zipcode\":\"92998-3874\",\"geo\":{\"lat\":\"-37.3159\",\"lng\":\"81.1496\"}},\"phone\":\"1-770-736-8031x56442\",\"website\":\"hildegard.org\",\"company\":{\"name\":\"Romaguera-Crona\",\"catchPhrase\":\"Multi-layeredclient-serverneural-net\",\"bs\":\"harnessreal-timee-markets\"}},{\"id\":2,\"name\":\"ErvinHowell\",\"username\":\"Antonette\",\"email\":\"Shanna@melissa.tv\",\"address\":{\"street\":\"VictorPlains\",\"suite\":\"Suite879\",\"city\":\"Wisokyburgh\",\"zipcode\":\"90566-7771\",\"geo\":{\"lat\":\"-43.9509\",\"lng\":\"-34.4618\"}},\"phone\":\"010-692-6593x09125\",\"website\":\"anastasia.net\",\"company\":{\"name\":\"Deckow-Crist\",\"catchPhrase\":\"Proactivedidacticcontingency\",\"bs\":\"synergizescalablesupply-chains\"}}]";
    }

    private function getMockStringPost():string
    {
        return "{\"id\":1,\"userId\":1,\"title\":\"suntautfacererepellatprovidentoccaecatiexcepturioptioreprehenderit\",\"body\":\"quiaetsuscipit\\nsuscipitrecusandaeconsequunturexpeditaetcum\\nreprehenderitmolestiaeututquastotam\\nnostrumrerumestautemsuntremevenietarchitecto\"}";
    }

    private function authorJson():string
    {
        return "{\"id\":1,\"name\":\"LeanneGraham\",\"username\":\"Bret\",\"email\":\"Sincere@april.biz\",\"address\":{\"street\":\"KulasLight\",\"suite\":\"Apt.556\",\"city\":\"Gwenborough\",\"zipcode\":\"92998-3874\",\"geo\":{\"lat\":\"-37.3159\",\"lng\":\"81.1496\"}},\"phone\":\"1-770-736-8031x56442\",\"website\":\"hildegard.org\",\"company\":{\"name\":\"Romaguera-Crona\",\"catchPhrase\":\"Multi-layeredclient-serverneural-net\",\"bs\":\"harnessreal-timee-markets\"}}";
    }
}
